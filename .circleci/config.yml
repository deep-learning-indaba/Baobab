version: 2.1
jobs:
  build:
    machine:
      image: default
    steps:
      - checkout
      - run:
          name: Start container
          command: |
            python --version
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            openssl aes256 -md md5 -d -in docker-compose.circleci.yaml.enc -out docker-compose.yml -pass pass:$CONFIG_PASSWORD
            docker-compose up -d
      - run:
          name: Run migrations
          command: |
            docker-compose run web python3 api/run.py db upgrade --directory api/migrations
            docker-compose run web python3 api/run.py db downgrade --directory api/migrations
            docker-compose run web python3 api/run.py db upgrade --directory api/migrations
      - run:
          name: Run unit tests
          command: docker-compose run  web nosetests -v

  front-end-tests:
    machine:
      image: default
    steps:
      - checkout
      - run:
          name: Front-end install and tests.
          command: |
            docker-compose build test-ci
            docker-compose run test-ci

  migrate-test:
    docker:
      - image: gcr.io/google-appengine/python
    steps:
      - checkout
      - run:
          name: Migrate the staging database
          command: |
            # Install the cloud_sql_proxy
            echo $GCLOUD_SQL_SERVICE_KEY > cloud_proxy.key
            wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
            chmod +x cloud_sql_proxy
            mkdir /cloudsql
            chmod 777 /cloudsql
            ./cloud_sql_proxy -dir=/cloudsql -instances=baobab:us-central1:baobab -credential_file=cloud_proxy.key & # Run the cloud_sql_proxy
            # Run the migrations
            cd api
            echo "Current setuptools v- $(pip3 --setuptools)"
            pip3 install --upgrade setuptools==44.0.0
            echo "Updated setuptools v - $(pip3 --setuptools)"
            pip3 install -r requirements.txt
            DATABASE_URL=$STAGING_DB_PROXY python3 run.py db upgrade # Temporarily update the database url to the proxy and run migrations
          no_output_timeout: 30m

  migrate-prod:
    docker:
      - image: gcr.io/google-appengine/python
    steps:
      - checkout
      - run:
          name: Migrate the prod database
          command: |
            # Install the cloud_sql_proxy
            echo $GCLOUD_SQL_SERVICE_KEY > cloud_proxy.key
            wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
            chmod +x cloud_sql_proxy
            mkdir /cloudsql
            chmod 777 /cloudsql
            ./cloud_sql_proxy -dir=/cloudsql -instances=baobab:us-central1:baobab -credential_file=cloud_proxy.key & # Run the cloud_sql_proxy
            # Run the migrations
            cd api
            echo "Current pip v- $(pip3 --version)"
            pip3 install --upgrade pip==20.0.1
            echo "Updated pip v - $(pip3 --version)"
            echo "Current setuptools v- $(pip3 --setuptools)"
            pip3 install --upgrade setuptools==44.0.0
            echo "Updated setuptools v - $(pip3 --setuptools)"
            pip3 install -r requirements.txt
            DATABASE_URL=$PROD_DB_PROXY python3 run.py db upgrade # Temporarily update the database url to the proxy and run migrations
          no_output_timeout: 1h

  deploy-backend-test:
    docker:
    - image: jobilla/google-cloud-sdk:latest
    steps:
      - checkout
      - run:
          name: Deploy backend to test
          command: |
            openssl aes256 -md md5 -d -in api/app.yaml.enc -out api/app.yaml -pass pass:$CONFIG_PASSWORD
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            cd api
            mv Dockerfile.deploy Dockerfile # It doesn't like deploying to flex:python with Dockerfile
            gcloud app deploy --version=v1 --stop-previous-version --promote

  deploy-backend-prod:
    docker:
    - image: jobilla/google-cloud-sdk:latest
    steps:
      - checkout
      - run:
          name: Deploy backend to test
          command: |
            openssl aes256 -md md5 -d -in api/prod.yaml.enc -out api/prod.yaml -pass pass:$CONFIG_PASSWORD
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            cd api
            mv Dockerfile.deploy Dockerfile
            gcloud app deploy prod.yaml --version=v1 --stop-previous-version --promote

  deploy-test:
    docker:
      - image: jobilla/google-cloud-sdk:latest
    steps:
      - checkout
      - run:
          name: Deploy to test
          command: |
            curl -o- -L https://yarnpkg.com/install.sh | sh
            export PATH=~/.yarn/bin:$PATH
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install v13.12.0 && nvm use v13.12.0 && nvm alias default v13.12.0
            node -v
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            cd webapp
            yarn
            CI=false yarn build-test
            gcloud app deploy staging-app.yaml dispatch.yaml

  deploy-prod:
    docker:
      - image: jobilla/google-cloud-sdk:latest
    steps:
      - checkout
      - run:
          name: Deploy to production
          command: |
            curl -o- -L https://yarnpkg.com/install.sh | sh
            export PATH=~/.yarn/bin:$PATH
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install v13.12.0 && nvm use v13.12.0 && nvm alias default v13.12.0
            node -v
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            cd webapp
            openssl aes256 -md md5 -d -in .env.production.enc -out .env.production -pass pass:$CONFIG_PASSWORD
            yarn
            CI=false yarn build
            gcloud app deploy prod-app.yaml dispatch.yaml

workflows:
  build_and_test:
    jobs:
      - build
      - front-end-tests
      - migrate-test:
          filters:
            branches:
              only: develop
      - migrate-prod:
          filters:
            branches:
              only: master
      - deploy-backend-test:
          filters:
            branches:
              only: develop
      - deploy-backend-prod:
          filters:
            branches:
              only: master
      - deploy-test:
          filters:
            branches:
              only: develop
      - deploy-prod:
          filters:
            branches:
              only: master
