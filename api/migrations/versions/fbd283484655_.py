"""empty message

Revision ID: fbd283484655
Revises: 6fa47605c615
Create Date: 2019-02-22 17:19:17.510033

"""

# revision identifiers, used by Alembic.
revision = "fbd283484655"
down_revision = "6fa47605c615"

import sqlalchemy as sa
from alembic import op
from sqlalchemy import orm
from sqlalchemy.ext.declarative import DeferredReflection, declarative_base

from app import bcrypt, db

Base = declarative_base()


class Section(Base):
    __tablename__ = "section"
    __table_args__ = {"extend_existing": True}
    id = db.Column(db.Integer(), primary_key=True)
    application_form_id = db.Column(
        db.Integer(), db.ForeignKey("application_form.id"), nullable=False
    )
    name = db.Column(db.String(255), unique=True, nullable=False)
    description = db.Column(db.String(255), nullable=False)
    order = db.Column(db.Integer(), unique=True, nullable=False)

    def __init__(self, application_form_id, name, description, order):
        self.application_form_id = application_form_id
        self.name = name
        self.description = description
        self.order = order


class Question(Base):
    __tablename__ = "question"
    __table_args__ = {"extend_existing": True}
    id = db.Column(db.Integer(), primary_key=True)
    section_id = db.Column(db.Integer(), db.ForeignKey("section.id"), nullable=False)
    type = db.Column(db.String(), nullable=False)
    description = db.Column(db.String(), nullable=True)
    headline = db.Column(db.String(), nullable=False)
    placeholder = db.Column(db.String(), nullable=True)
    validation_regex = db.Column(db.String(), nullable=True)
    order = db.Column(db.Integer(), nullable=False)
    options = db.Column(db.JSON(), nullable=True)
    is_required = db.Column(db.Boolean(), nullable=False)

    def __init__(
        self,
        application_form_id,
        section_id,
        headline,
        placeholder,
        order,
        questionType,
        validation_regex,
        is_required=True,
        description=None,
        options=None,
    ):
        self.section_id = section_id
        self.headline = headline
        self.placeholder = placeholder
        self.order = order
        self.type = questionType
        self.description = description
        self.options = options
        self.is_required = is_required
        self.validation_regex = validation_regex


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("unique_user_code", table_name="password_reset")
    op.add_column("question", sa.Column("placeholder", sa.String(), nullable=True))
    op.add_column("question", sa.Column("validation_regex", sa.String(), nullable=True))
    op.create_unique_constraint("uq_section_order", "section", ["order"])
    update_question_data()
    # ### end Alembic commands ###


def update_question(session, question_id, placeholder, validation_regex):
    question = session.query(Question).filter(Question.id == question_id).first()
    question.placeholder = placeholder
    question.validation_regex = validation_regex


def update_question_data():
    Base.metadata.bind = op.get_bind()
    session = orm.Session(bind=Base.metadata.bind)
    update_question(session, 1, "Enter 50 to 150 words", r"^\W*(\w+(\W+|$)){50,150}$")
    update_question(session, 2, "Enter 50 to 150 words", r"^\W*(\w+(\W+|$)){50,150}$")
    update_question(
        session,
        3,
        "Enter up to 80 words, remember to include *why*",
        r"^\W*(\w+(\W+|$)){0,80}$",
    )
    update_question(session, 4, "Enter up to 80 words", r"^\W*(\w+(\W+|$)){0,80}$")
    update_question(session, 5, "Enter up to 150 words", r"^\W*(\w+(\W+|$)){0,150}$")
    update_question(session, 9, "Enter up to 150 words", r"^\W*(\w+(\W+|$)){0,150}$")
    update_question(session, 10, "Departure Airport", None)
    update_question(session, 18, "Enter up to 150 words", r"^\W*(\w+(\W+|$)){0,150}$")

    cv_question = session.query(Question).filter(Question.id == 7).first()
    cv_question.placeholder = "Select and option..."
    cv_question.options = [
        {"value": "yes", "label": "Yes"},
        {"value": "no", "label": "No"},
    ]

    travel_question = session.query(Question).filter(Question.id == 8).first()
    travel_question.placeholder = "Select an option..."
    travel_question.options = [
        {
            "value": "transport-accommodation",
            "label": "Yes, transport and accommodation",
        },
        {"value": "transport", "label": "Yes, transport only"},
        {"value": "accommodation", "label": "Yes, accommodation only"},
        {"value": "none", "label": "None"},
    ]

    reward_question = session.query(Question).filter(Question.id == 11).first()
    reward_question.placeholder = "Select an option..."
    reward_question.options = [
        {"value": "yes", "label": "Yes"},
        {"value": "no", "label": "No"},
    ]

    previous_question = session.query(Question).filter(Question.id == 15).first()
    previous_question.placeholder = "Select an option..."
    previous_question.options = [
        {"value": "indaba-2017", "label": "Yes, I attended the 2017 Indaba"},
        {"value": "indaba-2018", "label": "Yes, I attended the 2018 Indaba"},
        {"value": "indaba-2017-2018", "label": "Yes, I attended both Indabas"},
        {"value": "none", "label": "No"},
    ]

    grow_question = session.query(Question).filter(Question.id == 16).first()
    grow_question.placeholder = "Enter up to 150 words"
    grow_question.validation_regex = r"^\W*(\w+(\W+|$)){0,150}$"
    grow_question.description = "Maximum 150 words."

    # Remove the demographic information section
    session.query(Question).filter(Question.section_id == 4).delete()
    session.query(Section).filter(Section.id == 4).delete()

    session.commit()
    session.flush()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("uq_section_order", "section", type_="unique")
    op.drop_column("question", "validation_regex")
    op.drop_column("question", "placeholder")
    op.create_index(
        "unique_user_code", "password_reset", ["user_id", "code"], unique=True
    )
    # ### end Alembic commands ###
