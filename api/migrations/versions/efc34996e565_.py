"""empty message

Revision ID: efc34996e565
Revises: 35cdc3c51184
Create Date: 2019-03-06 19:13:41.439087

"""

# revision identifiers, used by Alembic.
revision = "efc34996e565"
down_revision = "35cdc3c51184"

from datetime import datetime

import sqlalchemy as sa
from alembic import op
from sqlalchemy import orm
from sqlalchemy.ext.declarative import declarative_base

from app import db

Base = declarative_base()


class Section(Base):
    __tablename__ = "section"
    __table_args__ = {"extend_existing": True}
    id = db.Column(db.Integer(), primary_key=True)
    application_form_id = db.Column(
        db.Integer(), db.ForeignKey("application_form.id"), nullable=False
    )
    name = db.Column(db.String(255), unique=True, nullable=False)
    description = db.Column(db.String(255), nullable=False)
    order = db.Column(db.Integer(), unique=True, nullable=False)

    def __init__(self, application_form_id, name, description, order):
        self.application_form_id = application_form_id
        self.name = name
        self.description = description
        self.order = order


# Freeze the models
class UserCategory(Base):
    __tablename__ = "user_category"
    __table_args__ = {"extend_existing": True}
    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    group = db.Column(db.String(100))

    def __init__(self, name, description=None, group=None):
        self.name = name
        self.description = description
        self.group = group


class Question(Base):
    __tablename__ = "question"
    __table_args__ = {"extend_existing": True}
    id = db.Column(db.Integer(), primary_key=True)
    application_form_id = db.Column(
        db.Integer(), db.ForeignKey("application_form.id"), nullable=False
    )
    section_id = db.Column(db.Integer(), db.ForeignKey("section.id"), nullable=False)
    type = db.Column(db.String(), nullable=False)
    description = db.Column(db.String(), nullable=True)
    headline = db.Column(db.String(), nullable=False)
    placeholder = db.Column(db.String(), nullable=True)
    validation_regex = db.Column(db.String(), nullable=True)
    validation_text = db.Column(db.String(), nullable=True)
    order = db.Column(db.Integer(), nullable=False)
    options = db.Column(db.JSON(), nullable=True)
    is_required = db.Column(db.Boolean(), nullable=False)

    def __init__(
        self,
        application_form_id,
        section_id,
        headline,
        placeholder,
        order,
        questionType,
        validation_regex,
        validation_text=None,
        is_required=True,
        description=None,
        options=None,
    ):
        self.application_form_id = application_form_id
        self.section_id = section_id
        self.headline = headline
        self.placeholder = placeholder
        self.order = order
        self.type = questionType
        self.description = description
        self.options = options
        self.is_required = is_required
        self.validation_regex = validation_regex
        self.validation_text = validation_text


class ApplicationForm(Base):
    __tablename__ = "application_form"
    __table_args__ = {"extend_existing": True}
    id = db.Column(db.Integer(), primary_key=True)
    event_id = db.Column(db.Integer(), db.ForeignKey("event.id"), nullable=False)
    is_open = db.Column(db.Boolean(), nullable=False)
    deadline = db.Column(db.DateTime(), nullable=False)

    def __init__(self, event_id, is_open, deadline):
        self.event_id = event_id
        self.is_open = is_open
        self.deadline = deadline


def upgrade():
    Base.metadata.bind = op.get_bind()
    session = orm.Session(bind=Base.metadata.bind)
    # ### commands auto generated by Alembic - please adjust! ###
    # Update closing date for Indaba 2019 application form to 12 April 2019
    application_form = session.query(ApplicationForm).filter(
        ApplicationForm.event_id == 1
    )
    application_form.deadline = "12 April 2019"
    application_form.description = "This is the official application form to apply for participation in the Deep Learning Indaba to be held 25-31 August 2019 in Nairobi, Kenya. Students can also use this application form to apply for travel and accommodation awards. \n \n \n Closing date: 12 April 2019"

    # Update placeholder on "May we add your CV..." question to "Select an option..." (it currently says Select and option...)
    question = (
        session.query(Question)
        .filter(
            Question.headline
            == "May we add your CV and email address to a database for sharing with our sponsors?"
        )
        .first()
    )
    question.placeholder = "Select an option"

    # Update "Academic" to "Academic Faculty" in user category
    category = (
        session.query(UserCategory).filter(UserCategory.name == "Academic").first()
    )
    if category is not None:
        category.name = "Academic Faculty"

    session.commit()
    session.flush()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
